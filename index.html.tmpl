<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>JJWL Matches</title>
  <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
  <link rel="stylesheet" href="https://unpkg.com/@picocss/pico@2.0.6/css/pico.min.css">
  <style>
    :root {
      --font-size-base: 1.1rem;
      --font-size-large: 1.25rem;
    }
    body {
      padding: 1rem;
      font-size: var(--font-size-base);
      line-height: 1.6;
    }
    header, main {
      max-width: 100%;
    }
    input[type="search"] {
      font-size: var(--font-size-large);
      padding: 0.8rem 1rem;
      margin-bottom: 1rem;
    }
    table {
      width: 100%;
      font-size: var(--font-size-base);
    }
    table td, table th {
      vertical-align: top;
      padding: 0.75rem;
    }
    table th {
      font-size: var(--font-size-large);
    }
    .video-row td {
      background: #f9fafb;
      text-align: center;
    }
    video {
      width: 100%;
      max-height: 60vh;
      border-radius: 0.75rem;
    }
    button {
      font-size: var(--font-size-base);
      padding: 0.6rem 1rem;
      margin: 0.25rem 0;
      white-space: nowrap;
      border-radius: 0.5rem;
    }
    button a {
      text-decoration: none;
      font-size: inherit;
      color: inherit;
    }
    @media (max-width: 768px) {
      table th:nth-child(2),
      table td:nth-child(2) {
        display: none; /* hide Category on narrow screens */
      }
    }
    @media (max-width: 480px) {
      body {
        font-size: 1.2rem;
      }
      table th, table td {
        padding: 0.5rem;
      }
      button {
        width: 100%;
        margin-bottom: 0.5rem;
      }
      [role="group"] {
        display: flex;
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <main class="container-fluid">
    <input type="search" id="search" placeholder="🔍 Search matches..." aria-label="Search">

    <table id="csvTable" role="grid">
      <thead>
        <tr>
          <th>Event</th>
          <th>Category</th>
          <th>Match</th>
          <th>Video</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </main>

  <!-- Raw CSV -->
  <script id="csvData" type="text/plain">
    CSV_DATA
  </script>

  <script>
    const raw = document.getElementById("csvData").textContent.trim();
    const rows = raw.split("\n").map(r => r.split(","));
    const data = rows.map(r => ({
      title: r[0].trim(),
      event: r[1].trim(),
      category: r[2].trim(),
      video: r[3].trim()
    }));

    const tbody = document.querySelector("#csvTable tbody");
    let openVideoRow = null;

    function renderTable(items, limit = 200) {
      tbody.innerHTML = "";
      items.slice(0, limit).forEach((item, idx) => {
        const tr = document.createElement("tr");

        if (item.video === "Not available") {
          tr.innerHTML = `
            <td>${item.event}</td>
            <td>${item.category}</td>
            <td>${item.title}</td>
            <td><em>No video</em></td>
          `;
          tbody.appendChild(tr);
        } else {
          const downloadUrl = item.video.replace("raw=1", "dl=1");
          tr.innerHTML = `
            <td>${item.event}</td>
            <td>${item.category}</td>
            <td>${item.title}</td>
            <td>
              <div role="group">
                <button data-index="${idx}" class="secondary">Open Video</button>
                <button class="secondary">
                  <a href="${downloadUrl}" download class="contrast">Download</a>
                </button>
              </div>
            </td>
          `;
          tbody.appendChild(tr);
        }
      });
    }

    tbody.addEventListener("click", e => {
      const btn = e.target.closest("button");
      if (!btn) return;
      const idx = btn.dataset.index;
      const row = btn.closest("tr");

      if (openVideoRow && openVideoRow !== row.nextSibling) {
        openVideoRow.remove();
        if (openVideoRow.previousSibling) {
          openVideoRow.previousSibling.querySelector("button").textContent = "Open Video";
        }
        openVideoRow = null;
      }

      if (openVideoRow === row.nextSibling) {
        openVideoRow.remove();
        btn.textContent = "Open Video";
        openVideoRow = null;
      } else {
        const videoRow = document.createElement("tr");
        videoRow.classList.add("video-row");
        videoRow.innerHTML = `<td colspan="4">
          <video controls autoplay>
            <source src="${currentResults[idx].video}" type="video/mp4">
          </video>
        </td>`;
        row.insertAdjacentElement("afterend", videoRow);
        btn.textContent = "Close Video";
        openVideoRow = videoRow;
      }
    });

    let currentResults = data;

    function debounce(fn, delay = 250) {
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...args), delay);
      };
    }

    function handleSearch(q) {
      if (openVideoRow) {
        openVideoRow.remove();
        openVideoRow = null;
      }
      if (!q) {
        currentResults = data;
      } else {
        const terms = q.split(/\s+/).filter(Boolean);
        let results = data;
        for (const term of terms) {
          const fuse = new Fuse(results, {
            keys: [
              { name: "title", weight: 0.3 },
              { name: "event", weight: 0.3 },
              { name: "category", weight: 0.3 }
            ],
            threshold: 0.5,
            ignoreLocation: true,
            minMatchCharLength: 2,
            isCaseSensitive: false,
            includeScore: true
          });
          results = fuse.search(term).map(r => r.item);
        }
        const finalFuse = new Fuse(results, {
          keys: ["title", "event", "category"],
          threshold: 0.5,
          ignoreLocation: true,
          minMatchCharLength: 2,
          isCaseSensitive: false,
          includeScore: true
        });
        currentResults = finalFuse.search(q)
          .sort((a, b) => a.score - b.score)
          .map(r => r.item);
      }
      renderTable(currentResults);
    }

    document.getElementById("search").addEventListener(
      "input",
      debounce(e => handleSearch(e.target.value.trim()), 500)
    );

    renderTable(data);
  </script>
</body>
</html>
