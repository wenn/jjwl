<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>JJWL Matches</title>
  <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.6.2"></script>
  <link rel="stylesheet" href="https://unpkg.com/@picocss/pico@2.0.6/css/pico.min.css">
  <style>
    body { padding: 1rem; }
    table td, table th { vertical-align: top; }
    .video-row td { background: #f9fafb; text-align: center; }
    video { width: 100%; max-height: 480px; border-radius: 0.5rem; }
    button { white-space: nowrap; }
  </style>
</head>
<body>
  <main class="container">
    <input type="search" id="search" placeholder="🔍 Search matches..." aria-label="Search">

    <table id="csvTable" role="grid">
      <thead>
        <tr>
          <th>Event</th>
          <th>Category</th>
          <th>Title</th>
          <th>Video</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </main>

  <!-- Raw CSV (shortened for example) -->
  <script id="csvData" type="text/plain">
    CSV_DATA
  </script>

  <script>
    const raw = document.getElementById("csvData").textContent.trim();
    const rows = raw.split("\n").map(r => r.split(","));
    const data = rows.map(r => ({
      title: r[0].trim(),
      event: r[1].trim(),
      category: r[2].trim(),
      video: r[3].trim()
    }));

    const tbody = document.querySelector("#csvTable tbody");
    let openVideoRow = null;

    // Render limited rows
    function renderTable(items, limit = 200) {
      tbody.innerHTML = "";
      items.slice(0, limit).forEach((item, idx) => {
        const tr = document.createElement("tr");

        if (item.video === "Not available") {
          tr.innerHTML = `
            <td>${item.event}</td>
            <td>${item.category}</td>
            <td>${item.title}</td>
            <td><em>No video</em></td>
          `;

          tbody.appendChild(tr);
        } else {
        const downloadUrl = item.video.replace("raw=1", "dl=1"); // for download

          tr.innerHTML = `
            <td>${item.event}</td>
            <td>${item.category}</td>
            <td>${item.title}</td>
            <td>
              <div role="group">
                <button data-index="${idx}" class="secondary">Open Video</button>
                <button class="secondary">
                  <a href="${downloadUrl}" download class="contrast">Download</a>
                </button>
              </div>
            </td>

          `;
          tbody.appendChild(tr);
        }
      });
    }

    // Use event delegation for buttons
    tbody.addEventListener("click", e => {
      if (e.target.tagName !== "BUTTON") return;
      const idx = e.target.dataset.index;
      const row = e.target.closest("tr");

      // Close previous video
      if (openVideoRow && openVideoRow !== row.nextSibling) {
        openVideoRow.remove();
        if (openVideoRow.previousSibling) {
          openVideoRow.previousSibling.querySelector("button").textContent = "Open Video";
        }
        openVideoRow = null;
      }

      // Toggle this video
      if (openVideoRow === row.nextSibling) {
        openVideoRow.remove();
        e.target.textContent = "Open Video";
        openVideoRow = null;
      } else {
        const videoRow = document.createElement("tr");
        videoRow.classList.add("video-row");
        videoRow.innerHTML = `<td colspan="4">
          <video controls autoplay>
            <source src="${currentResults[idx].video}" type="video/mp4">
          </video>
        </td>`;
        row.insertAdjacentElement("afterend", videoRow);
        e.target.textContent = "Close Video";
        openVideoRow = videoRow;
      }
    });

    // Initialize Fuse
    let currentResults = data;

    // Debounce function
    function debounce(fn, delay = 250) {
      let t;
      return (...args) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...args), delay);
      };
    }

    // Search handler
    function handleSearch(q) {
      if (openVideoRow) {
        openVideoRow.remove();
        openVideoRow = null;
      }

      if (!q) {
        currentResults = data;
      } else {
        const terms = q.split(/\s+/).filter(Boolean);
        let results = data;

        // apply Fuse filtering term by term
        for (const term of terms) {
          const fuse = new Fuse(results, {
            keys: [
              { name: "title", weight: 0.2 },
              { name: "event", weight: 0.2 },
              { name: "category", weight: 0.2 }
            ],
            threshold: 0.5,
            ignoreLocation: true,
            minMatchCharLength: 2,
            isCaseSensitive: false,
            includeScore: true
          });

          results = fuse.search(term).map(r => r.item);
        }

        // Final pass: score all results against the full query
        const finalFuse = new Fuse(results, {
          keys: [
            { name: "title", weight: 0.2 },
            { name: "event", weight: 0.2 },
            { name: "category", weight: 0.2 }
          ],
          threshold: 0.5,
          ignoreLocation: true,
          minMatchCharLength: 2,
          isCaseSensitive: false,
          includeScore: true
        });

        currentResults = finalFuse.search(q)
          .sort((a, b) => a.score - b.score) // best matches first
          .map(r => r.item);
      }

      renderTable(currentResults);
    }

    document.getElementById("search").addEventListener(
      "input",
      debounce(e => handleSearch(e.target.value.trim()), 500)
    );

    // Initial render
    renderTable(data);
  </script>
</body>
</html>
